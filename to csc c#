using System;
using System.Data.OleDb;
using System.Data;
using System.IO;
using System.Text;
using System.Globalization;

namespace ExcelToCsvConverter
{
    class Program
    {
        static void Main(string[] args)
        {
            // Check for correct number of command-line arguments
            if (args.Length != 2)
            {
                Console.WriteLine("Usage: ExcelToCsvConverter.exe <input_excel_file_path> <output_csv_file_path>");
                Console.WriteLine("Example: ExcelToCsvConverter.exe \"C:\\Data\\input.xlsx\" \"C:\\Data\\output.csv\"");
                return;
            }

            string excelFilePath = args[0];
            string csvFilePath = args[1];

            // Validate input file existence
            if (!File.Exists(excelFilePath))
            {
                Console.WriteLine($"Error: The Excel file '{excelFilePath}' does not exist.");
                return;
            }

            // Validate input file extension
            if (!Path.GetExtension(excelFilePath).ToLower().Equals(".xlsx") && !Path.GetExtension(excelFilePath).ToLower().Equals(".xls"))
            {
                Console.WriteLine($"Error: The input file '{excelFilePath}' is not a valid Excel file (.xlsx or .xls).");
                return;
            }

            try
            {
                ConvertExcelToCsv(excelFilePath, csvFilePath);
                Console.WriteLine($"CSV file successfully created at: {csvFilePath}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }

        static void ConvertExcelToCsv(string excelFilePath, string csvFilePath)
        {
            // Connection string for Excel files (.xlsx or .xls)
            string connectionString = $"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={excelFilePath};Extended Properties=\"Excel 12.0 Xml;HDR=YES;\"";

            using (OleDbConnection connection = new OleDbConnection(connectionString))
            {
                connection.Open();

                // Get the first worksheet name
                DataTable schema = connection.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                if (schema == null || schema.Rows.Count == 0)
                {
                    throw new Exception("No worksheets found in the Excel file.");
                }
                string sheetName = schema.Rows[0]["TABLE_NAME"].ToString();

                // Query to select all data from the worksheet
                string query = $"SELECT * FROM [{sheetName}]";
                using (OleDbDataAdapter adapter = new OleDbDataAdapter(query, connection))
                {
                    DataTable dataTable = new DataTable();
                    adapter.Fill(dataTable);

                    // Ensure output directory exists
                    string outputDir = Path.GetDirectoryName(csvFilePath);
                    if (!string.IsNullOrEmpty(outputDir) && !Directory.Exists(outputDir))
                    {
                        Directory.CreateDirectory(outputDir);
                    }

                    // Write to CSV with UTF-8 encoding
                    using (StreamWriter writer = new StreamWriter(csvFilePath, false, Encoding.UTF8))
                    {
                        // Write headers
                        StringBuilder header = new StringBuilder();
                        foreach (DataColumn column in dataTable.Columns)
                        {
                            header.Append($"\"{column.ColumnName.Replace("\"", "\"\"")}\"|");
                        }
                        writer.WriteLine(header.ToString().TrimEnd('|'));

                        // Write data rows
                        foreach (DataRow row in dataTable.Rows)
                        {
                            StringBuilder rowData = new StringBuilder();
                            foreach (DataColumn column in dataTable.Columns)
                            {
                                object value = row[column];
                                string formattedValue;

                                if (value == null || value == DBNull.Value)
                                {
                                    formattedValue = "";
                                }
                                else if (value is DateTime dateValue)
                                {
                                    // Format dates as yyyy-mm-dd
                                    formattedValue = dateValue.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
                                }
                                else
                                {
                                    // Treat all other values as text
                                    formattedValue = value.ToString().Replace("\"", "\"\"");
                                }

                                rowData.Append($"\"{formattedValue}\"|");
                            }
                            writer.WriteLine(rowData.ToString().TrimEnd('|'));
                        }
                    }
                }
            }
        }
    }
}